#!/usr/bin/env python
# encoding: utf-8
'''
com.shendl.dnsdynamic.dnsManager -- shortdesc

com.shendl.dnsdynamic.dnsManager is a description

It defines classes_and_methods

@author:     user_name

@copyright:  2014 organization_name. All rights reserved.

@license:    license

@contact:    user_email
@deffield    updated: Updated
'''

import sys
import os
import socket
import httplib
import time
from optparse import OptionParser
import base64 

__all__ = []
__version__ = 0.1
__date__ = '2014-03-31'
__updated__ = '2014-03-31'

DEBUG = 1
TESTRUN = 0
PROFILE = 0
lastPublicIP=""
def getCurrentPublicIP():
    '''
    return (currentPublicIP,errorCode)
    errorCode=0 is OK
    errorCode<0 is error
    '''
    
    currentPublicIP=""
    errorCode=0
    try:
        conn = httplib.HTTPConnection("checkip.dyndns.com",timeout=30)
        conn.request("GET", "/")
        r1 = conn.getresponse()
        print r1.status, r1.reason
        if(r1.status!=200):
            errorCode=-1*r1.status
            return (currentPublicIP,errorCode)
            pass
        #200 OK
        data1 = r1.read()
        print(data1)
        startIndex=data1.find(":")
        if(startIndex!=-1):
            startIndex=startIndex+1
        else:
            return (currentPublicIP,-1)
        endIndex=data1.find("</body>")
        if(endIndex==-1):
            return (currentPublicIP,-1)
        currentPublicIP=data1[startIndex:endIndex]
        currentPublicIP.strip()
        print currentPublicIP
        conn.close()
        
    except socket.error,e:
        print e
        errorCode=-2
    finally:
        return (currentPublicIP,errorCode)
        pass
    pass

def updateDnsIp(username,password,dns,ip):
    #https://shendl1978@gmail.com:PASSWORD@www.dnsdynamic.org
    errorCode=0
    try:
        conn = httplib.HTTPSConnection("www.dnsdynamic.org",timeout=60)
        url="/api/?hostname=%s&myip=%s" %(dns,ip)
    
    #userAndPass = b64encode(("%s:%s" % (username,password))).decode("ascii")
        auth = base64.encodestring('%s:%s' % (username, password)).replace('\n', '')
        headers = { 'Authorization' : 'Basic %s' %  auth }
        conn.request("GET",url,headers=headers)
        r1 = conn.getresponse()
        print r1.status, r1.reason
#200 OK
        data1 = r1.read()
        print(data1)
    
        conn.close()
    except socket.error,e:
        print e
        errorCode=-2
    finally:
        return errorCode
        pass
     
    pass

def updateDnsIpLoop(username,password,dns):
    global lastPublicIP
    i=0
    while True:
        print("The %d times update dns!!!!!!!!!!!" % i)
        i=i+1
        (currentPublicIP,errorCode)=getCurrentPublicIP()
        
        if(errorCode!=0):
            print("getCurrentPublicIP errorCode is :%d",errorCode)
        else:
            print("getCurrentPublicIP:%s" % currentPublicIP)
            if lastPublicIP!=currentPublicIP:
                print("lastPublicIP:%s,currentPublicIP:%s" % (lastPublicIP,currentPublicIP))
                if updateDnsIp(username,password,dns,currentPublicIP)==0:
                    lastPublicIP=currentPublicIP
                    pass
                else:
                    print("updateDnsIp failed")
                    pass
            else:
                print("no need to update ip of dns")
                pass
            pass
        time.sleep(30)
    
def main(argv=None):
    '''Command line options.'''

    program_name = os.path.basename(sys.argv[0])
    program_version = "v0.1"
    program_build_date = "%s" % __updated__

    program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
    #program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
    program_longdesc = '''''' # optional - give further explanation about what the program does
    program_license = "Copyright 2014 user_name (organization_name)                                            \
                Licensed under the Apache License 2.0\nhttp://www.apache.org/licenses/LICENSE-2.0"
    
    
    if argv is None:
        argv = sys.argv[1:]
    try:
        # setup option parser
        parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)
        #parser.add_option("-i", "--in", dest="infile", help="set input path [default: %default]", metavar="FILE")
        #parser.add_option("-o", "--out", dest="outfile", help="set output path [default: %default]", metavar="FILE")
        parser.add_option("-u", "--username", dest="username", help="username on https://www.dnsdynamic.org/", metavar="USERNAME")
        parser.add_option("-p", "--password", dest="password", help="password on https://www.dnsdynamic.org/", metavar="PASSWORD")
        parser.add_option("-d", "--dns", dest="dns", help="dns on https://www.dnsdynamic.org/", metavar="DNS")
        parser.add_option("-v", "--verbose", dest="verbose", action="count", help="set verbosity level [default: %default]")

        # set defaults
        #parser.set_defaults(outfile="./out.txt", infile="./in.txt")

        # process options
        (opts, args) = parser.parse_args(argv)
        
        if opts.verbose > 0:
            print("verbosity level = %d" % opts.verbose)
        #if opts.infile:
            #print("infile = %s" % opts.infile)
        #if opts.outfile:
            #print("outfile = %s" % opts.outfile)
            
        if not opts.username:
            print("must supply username")
            return 3
        if not opts.password:
            print("must supply password")
            return 3  
        if not opts.dns:
            print("must supply dns")
            return 3  
        # MAIN BODY #
        username="shendl1978@gmail.com"
         
        dns="shendl.adultdns.net"
        updateDnsIpLoop(opts.username,opts.password,opts.dns)
    except Exception, e:
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help")
        return 2


if __name__ == "__main__":
    if DEBUG:
        #sys.argv.append("-h")
        pass
    if TESTRUN:
        import doctest
        doctest.testmod()
    if PROFILE:
        import cProfile
        import pstats
        profile_filename = 'com.shendl.dnsdynamic.dnsManager_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(0)
    sys.exit(main())